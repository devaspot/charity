functor chLexFun(structure Tokens: ch_TOKENS)=
   struct
    structure UserDeclarations =
      struct
structure Tokens = Tokens
type pos = int
type svalue = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult= (svalue,pos) token

val pos = ref 1
val strbuf = ref ""
val comment_level = ref 0
val eof = fn () => Tokens.EOF(!pos,!pos)
val error = fn str => (print ("Unknown token:["^String.toCString(str) ^ "]"))
fun resetLineNo() = pos:=1
(*
<INITIAL>"{\\"    => (Tokens.L_MACBRACE(!pos, !pos));
<INITIAL>"\\}"    => (Tokens.R_MACBRACE(!pos, !pos));
<INITIAL>"1"      => (Tokens.ONE(!pos, !pos));
*)

end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\007\007\007\007\007\007\007\007\007\077\079\007\007\077\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\077\007\076\075\007\072\007\007\069\068\066\064\063\060\058\056\
\\054\054\054\054\054\054\054\054\054\054\050\049\046\043\041\007\
\\040\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\039\007\038\037\036\
\\007\033\016\016\027\016\016\016\016\016\016\016\016\016\024\022\
\\016\016\016\016\016\016\016\016\019\016\016\013\010\009\008\007\
\\007"
),
 (3, 
"\080\080\080\080\080\080\080\080\080\080\085\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\083\080\081\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080"
),
 (5, 
"\086\086\086\086\086\086\086\086\086\086\090\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\089\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\087\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\017\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\020\
\\018\018\018\018\018\018\018\018\018\018\018\017\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\021\018\018\018\018\018\018\018\018\017\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\023\018\018\018\018\018\018\018\018\017\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\025\
\\018\018\018\018\018\018\018\018\018\018\018\017\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\026\018\018\018\018\018\018\017\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\030\018\018\018\028\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\017\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\029\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\017\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\031\018\018\018\018\018\018\017\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\032\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\017\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\034\018\
\\018\018\018\018\018\018\018\018\018\018\018\017\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\035\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\017\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\045\044\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\048\047\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\053\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\055\055\055\055\055\055\055\055\055\055\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (69, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\071\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\070\000\000\000\
\\000"
),
 (72, 
"\073\073\073\073\073\073\073\073\073\073\074\073\073\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\078\000\000\000\078\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\078\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (83, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\084\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (87, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\088\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [(N 173)], trans = 0},
{fin = [(N 130),(N 173)], trans = 0},
{fin = [(N 58),(N 173)], trans = 0},
{fin = [(N 80),(N 173)], trans = 10},
{fin = [(N 64)], trans = 0},
{fin = [(N 70)], trans = 0},
{fin = [(N 56),(N 173)], trans = 13},
{fin = [(N 61)], trans = 0},
{fin = [(N 73)], trans = 0},
{fin = [(N 165),(N 173)], trans = 16},
{fin = [(N 162)], trans = 0},
{fin = [(N 165)], trans = 16},
{fin = [(N 165),(N 173)], trans = 19},
{fin = [(N 165)], trans = 20},
{fin = [(N 122),(N 165)], trans = 16},
{fin = [(N 165),(N 173)], trans = 22},
{fin = [(N 118),(N 165)], trans = 16},
{fin = [(N 165),(N 173)], trans = 24},
{fin = [(N 165)], trans = 25},
{fin = [(N 126),(N 165)], trans = 16},
{fin = [(N 165),(N 173)], trans = 27},
{fin = [(N 165)], trans = 28},
{fin = [(N 37),(N 165)], trans = 16},
{fin = [(N 165)], trans = 30},
{fin = [(N 165)], trans = 31},
{fin = [(N 33),(N 165)], trans = 16},
{fin = [(N 165),(N 173)], trans = 33},
{fin = [(N 165)], trans = 34},
{fin = [(N 115),(N 165)], trans = 16},
{fin = [(N 154),(N 165),(N 173)], trans = 16},
{fin = [(N 128),(N 173)], trans = 0},
{fin = [(N 54),(N 173)], trans = 0},
{fin = [(N 52),(N 173)], trans = 0},
{fin = [(N 158),(N 173)], trans = 0},
{fin = [(N 132),(N 173)], trans = 41},
{fin = [(N 135)], trans = 0},
{fin = [(N 78),(N 173)], trans = 43},
{fin = [(N 46)], trans = 0},
{fin = [(N 143)], trans = 0},
{fin = [(N 137),(N 173)], trans = 46},
{fin = [(N 146)], trans = 0},
{fin = [(N 140)], trans = 0},
{fin = [(N 89),(N 173)], trans = 0},
{fin = [(N 84),(N 173)], trans = 50},
{fin = [(N 76)], trans = 0},
{fin = [(N 87)], trans = 0},
{fin = [(N 149)], trans = 0},
{fin = [(N 152),(N 173)], trans = 54},
{fin = [(N 152)], trans = 54},
{fin = [(N 108),(N 173)], trans = 56},
{fin = [(N 111)], trans = 0},
{fin = [(N 91),(N 173)], trans = 58},
{fin = [(N 40)], trans = 0},
{fin = [(N 98),(N 173)], trans = 60},
{fin = [(N 43)], trans = 0},
{fin = [(N 101)], trans = 0},
{fin = [(N 82),(N 173)], trans = 0},
{fin = [(N 93),(N 173)], trans = 64},
{fin = [(N 96)], trans = 0},
{fin = [(N 103),(N 173)], trans = 66},
{fin = [(N 106)], trans = 0},
{fin = [(N 50),(N 173)], trans = 0},
{fin = [(N 48),(N 173)], trans = 69},
{fin = [(N 67)], trans = 0},
{fin = [(N 13)], trans = 0},
{fin = [(N 171),(N 173)], trans = 72},
{fin = [(N 171)], trans = 72},
{fin = [(N 171)], trans = 0},
{fin = [(N 156),(N 173)], trans = 0},
{fin = [(N 1),(N 173)], trans = 0},
{fin = [(N 28),(N 173)], trans = 77},
{fin = [(N 28)], trans = 77},
{fin = [(N 25)], trans = 0},
{fin = [(N 23)], trans = 0},
{fin = [(N 23)], trans = 81},
{fin = [(N 19)], trans = 0},
{fin = [(N 23)], trans = 83},
{fin = [(N 16)], trans = 0},
{fin = [(N 21)], trans = 0},
{fin = [(N 10)], trans = 0},
{fin = [(N 10)], trans = 87},
{fin = [(N 4)], trans = 0},
{fin = [(N 8),(N 10)], trans = 0},
{fin = [(N 6)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val COMMENT = STARTSTATE 3;
val INITIAL = STARTSTATE 1;
val STRENV = STARTSTATE 5;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let val yytext = substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => (YYBEGIN STRENV; strbuf:=""; lex())
| 10 => (strbuf := (!strbuf) ^ yytext ; lex())
| 101 => (Tokens.FSUB(!pos, !pos))
| 103 => (Tokens.MUL(!pos,!pos))
| 106 => (Tokens.FMUL(!pos,!pos))
| 108 => (Tokens.DIV(!pos, !pos))
| 111 => (Tokens.FDIV(!pos, !pos))
| 115 => (Tokens.AND(!pos, !pos))
| 118 => (Tokens.OR(!pos, !pos))
| 122 => (Tokens.XOR(!pos, !pos))
| 126 => (Tokens.NOT(!pos, !pos))
| 128 => (Tokens.STRCAT(!pos, !pos))
| 13 => (comment_level:= 1; YYBEGIN COMMENT; lex())
| 130 => (Tokens.NEG(!pos, !pos))
| 132 => (Tokens.GT(!pos, !pos))
| 135 => (Tokens.GE(!pos, !pos))
| 137 => (Tokens.LT(!pos, !pos))
| 140 => (Tokens.LE(!pos, !pos))
| 143 => (Tokens.EQV(!pos, !pos))
| 146 => (Tokens.NEQV(!pos, !pos))
| 149 => (Tokens.LISTINS(!pos, !pos))
| 152 => (Tokens.NUM(yytext, !pos, !pos))
| 154 => (Tokens.DONTCARE(!pos, !pos))
| 156 => (Tokens.SHARP(!pos, !pos))
| 158 => (Tokens.AT(!pos, !pos))
| 16 => (comment_level:=(!comment_level)+1; lex())
| 162 => (Tokens.COMB_ID(substring(yytext,0, (size yytext)- 1), !pos, !pos))
| 165 => (Tokens.ID(yytext,!pos,!pos))
| 171 => (pos:=(!pos)+1; lex())
| 173 => (error(yytext); Tokens.CHAR(yytext, !pos, !pos))
| 19 => (comment_level:=(!comment_level)-1;
                                      if (!comment_level)=0 then (YYBEGIN INITIAL;lex())
                                                            else lex())
| 21 => (pos:=(!pos)+1; lex())
| 23 => (lex())
| 25 => (pos:= (!pos) + 1; lex())
| 28 => (lex())
| 33 => (Tokens.DATA(!pos,!pos))
| 37 => (Tokens.DEF(!pos,!pos))
| 4 => (strbuf:= !strbuf ^ "\""; lex())
| 40 => (Tokens.RANGE(!pos, !pos))
| 43 => (Tokens.S_ARROW(!pos,!pos))
| 46 => (Tokens.D_ARROW(!pos,!pos))
| 48 => (Tokens.L_PAR(!pos,!pos))
| 50 => (Tokens.R_PAR(!pos,!pos))
| 52 => (Tokens.L_BRACKET(!pos,!pos))
| 54 => (Tokens.R_BRACKET(!pos,!pos))
| 56 => (Tokens.L_BRACE(!pos,!pos))
| 58 => (Tokens.R_BRACE(!pos,!pos))
| 6 => (print("missing right quote:" ^ !strbuf ^"\n");
                      YYBEGIN INITIAL; pos:=(!pos)+1; Tokens.STRING(!strbuf,!pos,!pos))
| 61 => (Tokens.L_FOLD(!pos,!pos))
| 64 => (Tokens.R_FOLD(!pos,!pos))
| 67 => (Tokens.L_UNFOLD(!pos,!pos))
| 70 => (Tokens.R_UNFOLD(!pos,!pos))
| 73 => (Tokens.L_RECUR(!pos,!pos))
| 76 => (Tokens.R_RECUR(!pos,!pos))
| 78 => (Tokens.EQUALS(!pos,!pos))
| 8 => (YYBEGIN INITIAL;
                      case String.fromCString (!strbuf)
                        of NONE => (print("unknown escape sequence in string"^(!strbuf));
                                         Tokens.STRING(!strbuf, !pos, !pos))
                         | SOME s=> Tokens.STRING(s, !pos, !pos)
                     )
| 80 => (Tokens.BAR(!pos,!pos))
| 82 => (Tokens.COMMA(!pos,!pos))
| 84 => (Tokens.COLON(!pos,!pos))
| 87 => (Tokens.HIGHERORDERCOLON(!pos, !pos))
| 89 => (Tokens.SEMICOLON(!pos,!pos))
| 91 => (Tokens.STOP(!pos,!pos))
| 93 => (Tokens.ADD(!pos, !pos))
| 96 => (Tokens.FADD(!pos, !pos))
| 98 => (Tokens.SUB(!pos, !pos))
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(String.sub(!yyb,l))
		val NewState = if NewChar<128 then Char.ord(String.sub(trans,NewChar)) else Char.ord(String.sub(trans,128))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
